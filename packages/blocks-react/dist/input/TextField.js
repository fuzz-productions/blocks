"use strict";var _extends=Object.assign||function(e){for(var r=1;r<arguments.length;r++){var a=arguments[r];for(var l in a)Object.prototype.hasOwnProperty.call(a,l)&&(e[l]=a[l])}return e};function _objectWithoutProperties(e,r){var a={};for(var l in e)0<=r.indexOf(l)||Object.prototype.hasOwnProperty.call(e,l)&&(a[l]=e[l]);return a}var React=require("react"),PropTypes=require("prop-types"),TextField=function(e){var r=e.label,a=e.isValid,l=e.invalidErrorMessage,t=e.prefix,s=e.suffix,i=e.icon,n=e.style,o=e.className,p=e.forwardedRef,c=_objectWithoutProperties(e,["label","isValid","invalidErrorMessage","prefix","suffix","icon","style","className","forwardedRef"]),d="",f=null;r&&(f=React.createElement("label",{className:"blx-ui-text"},r));var x=null;a||(x=React.createElement("span",{className:"blx-invalid-input-message"},l),d+=" blx-invalid");var u=null;t&&(u=React.createElement("span",{className:"blx-text-field-prefix"},t));var y=null;s&&(y=React.createElement("span",{className:"blx-text-field-suffix"},s));var b=null;i&&(b=React.createElement("span",{className:"blx-text-field-icon"},i));var m="blx-text-field ";return c.disabled&&(m+="blx-disabled "),React.createElement("div",{style:n,className:m+" "+o},f,React.createElement("div",{className:"blx-text-field-container"},u,y,React.createElement("input",_extends({className:d,ref:p},c)),b),x)};TextField.propTypes={className:PropTypes.string,style:PropTypes.object,label:PropTypes.string,prefix:PropTypes.oneOfType([PropTypes.string,PropTypes.node]),suffix:PropTypes.oneOfType([PropTypes.string,PropTypes.node]),icon:PropTypes.node,disabled:PropTypes.bool,isValid:PropTypes.bool,invalidErrorMessage:PropTypes.string},TextField.defaultProps={className:"",style:null,label:"",prefix:null,suffix:null,icon:null,disabled:!1,isValid:!0,invalidErrorMessage:""},module.exports=React.forwardRef(function(e,r){return React.createElement(TextField,_extends({},e,{forwardedRef:r}))});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlucHV0L1RleHRGaWVsZC5qc3giXSwibmFtZXMiOlsiUmVhY3QiLCJyZXF1aXJlIiwiUHJvcFR5cGVzIiwiVGV4dEZpZWxkIiwiX3JlZiIsImxhYmVsIiwiaXNWYWxpZCIsImludmFsaWRFcnJvck1lc3NhZ2UiLCJwcmVmaXgiLCJzdWZmaXgiLCJpY29uIiwic3R5bGUiLCJjbGFzc05hbWUiLCJmb3J3YXJkZWRSZWYiLCJvdGhlciIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsInRleHRGaWVsZENsYXNzZXMiLCJsYWJlbEVsZW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiaW52YWxpZExhYmVsTWVzc2FnZSIsInByZWZpeEVsZW1lbnQiLCJzdWZmaXhFbGVtZW50IiwiaWNvbkVsZW1lbnQiLCJjbGFzc2VzIiwiZGlzYWJsZWQiLCJfZXh0ZW5kcyIsInJlZiIsInByb3BUeXBlcyIsInN0cmluZyIsIm9iamVjdCIsIm9uZU9mVHlwZSIsIm5vZGUiLCJib29sIiwiZGVmYXVsdFByb3BzIiwibW9kdWxlIiwiZXhwb3J0cyIsImZvcndhcmRSZWYiLCJwcm9wcyJdLCJtYXBwaW5ncyI6IjRVQUFBLElBQU1BLE1BQVFDLFFBQVEsU0FDaEJDLFVBQVlELFFBQVEsY0FHcEJFLFVBQVksU0FBQUMsR0FBNkcsSUFBMUdDLEVBQTBHRCxFQUExR0MsTUFBT0MsRUFBbUdGLEVBQW5HRSxRQUFTQyxFQUEwRkgsRUFBMUZHLG9CQUFxQkMsRUFBcUVKLEVBQXJFSSxPQUFRQyxFQUE2REwsRUFBN0RLLE9BQVFDLEVBQXFETixFQUFyRE0sS0FBTUMsRUFBK0NQLEVBQS9DTyxNQUFPQyxFQUF3Q1IsRUFBeENRLFVBQVdDLEVBQTZCVCxFQUE3QlMsYUFBaUJDLEVBQVlDLHlCQUFBWCxFQUFBLENBQUEsUUFBQSxVQUFBLHNCQUFBLFNBQUEsU0FBQSxPQUFBLFFBQUEsWUFBQSxpQkFFekhZLEVBQW1CLEdBR25CQyxFQUFlLEtBQ2ZaLElBQ0ZZLEVBQWVqQixNQUFBa0IsY0FBQSxRQUFBLENBQU9OLFVBQVUsZUFBZVAsSUFJakQsSUFBSWMsRUFBc0IsS0FDckJiLElBQ0hhLEVBQXNCbkIsTUFBQWtCLGNBQUEsT0FBQSxDQUFNTixVQUFVLDZCQUE2QkwsR0FDbkVTLEdBQW9CLGdCQUl0QixJQUFJSSxFQUFnQixLQUNoQlosSUFDRlksRUFBZ0JwQixNQUFBa0IsY0FBQSxPQUFBLENBQU1OLFVBQVUseUJBQXlCSixJQUkzRCxJQUFJYSxFQUFnQixLQUNoQlosSUFDRlksRUFBZ0JyQixNQUFBa0IsY0FBQSxPQUFBLENBQU1OLFVBQVUseUJBQXlCSCxJQUkzRCxJQUFJYSxFQUFjLEtBQ2RaLElBQ0ZZLEVBQWN0QixNQUFBa0IsY0FBQSxPQUFBLENBQU1OLFVBQVUsdUJBQXVCRixJQUl2RCxJQUFJYSxFQUFVLGtCQUdkLE9BRklULEVBQU1VLFdBQVVELEdBQVcsaUJBRzdCdkIsTUFBQWtCLGNBQUEsTUFBQSxDQUNFUCxNQUFPQSxFQUNQQyxVQUFjVyxFQUFkLElBQXlCWCxHQUV4QkssRUFDRGpCLE1BQUFrQixjQUFBLE1BQUEsQ0FBS04sVUFBVSw0QkFDWlEsRUFDQUMsRUFDRHJCLE1BQUFrQixjQUFBLFFBQUFPLFNBQUEsQ0FDRWIsVUFBV0ksRUFDWFUsSUFBS2IsR0FDREMsSUFFTFEsR0FFRkgsSUFLUGhCLFVBQVV3QixVQUFZLENBQ3BCZixVQUFXVixVQUFVMEIsT0FDckJqQixNQUFPVCxVQUFVMkIsT0FDakJ4QixNQUFPSCxVQUFVMEIsT0FDakJwQixPQUFRTixVQUFVNEIsVUFBVSxDQUMxQjVCLFVBQVUwQixPQUNWMUIsVUFBVTZCLE9BRVp0QixPQUFRUCxVQUFVNEIsVUFBVSxDQUMxQjVCLFVBQVUwQixPQUNWMUIsVUFBVTZCLE9BRVpyQixLQUFNUixVQUFVNkIsS0FDaEJQLFNBQVV0QixVQUFVOEIsS0FDcEIxQixRQUFTSixVQUFVOEIsS0FDbkJ6QixvQkFBcUJMLFVBQVUwQixRQUdqQ3pCLFVBQVU4QixhQUFlLENBQ3ZCckIsVUFBVyxHQUNYRCxNQUFPLEtBQ1BOLE1BQU8sR0FDUEcsT0FBUSxLQUNSQyxPQUFRLEtBQ1JDLEtBQU0sS0FDTmMsVUFBVSxFQUNWbEIsU0FBUyxFQUNUQyxvQkFBcUIsSUFHdkIyQixPQUFPQyxRQUFVbkMsTUFBTW9DLFdBQVcsU0FBQ0MsRUFBT1gsR0FBUixPQUNoQzFCLE1BQUFrQixjQUFDZixVQUFEc0IsU0FBQSxHQUFlWSxFQUFmLENBQXNCeEIsYUFBY2EiLCJmaWxlIjoiaW5wdXQvVGV4dEZpZWxkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgUHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG5cbmNvbnN0IFRleHRGaWVsZCA9ICh7IGxhYmVsLCBpc1ZhbGlkLCBpbnZhbGlkRXJyb3JNZXNzYWdlLCBwcmVmaXgsIHN1ZmZpeCwgaWNvbiwgc3R5bGUsIGNsYXNzTmFtZSwgZm9yd2FyZGVkUmVmLCAuLi5vdGhlciB9KSA9PiB7XG4gIC8vIHRleHQgaW5wdXQgZWxlbWVudCBpdHNlbGZcbiAgbGV0IHRleHRGaWVsZENsYXNzZXMgPSAnJztcblxuICAvLyBsYWJlbCBlbGVtZW50XG4gIGxldCBsYWJlbEVsZW1lbnQgPSBudWxsO1xuICBpZiAobGFiZWwpIHtcbiAgICBsYWJlbEVsZW1lbnQgPSA8bGFiZWwgY2xhc3NOYW1lPVwiYmx4LXVpLXRleHRcIj57bGFiZWx9PC9sYWJlbD47XG4gIH1cblxuICAvLyBpbnZhbGlkIG1lc3NhZ2UgYW5kIGNsYXNzXG4gIGxldCBpbnZhbGlkTGFiZWxNZXNzYWdlID0gbnVsbDtcbiAgaWYgKCFpc1ZhbGlkKSB7XG4gICAgaW52YWxpZExhYmVsTWVzc2FnZSA9IDxzcGFuIGNsYXNzTmFtZT1cImJseC1pbnZhbGlkLWlucHV0LW1lc3NhZ2VcIj57aW52YWxpZEVycm9yTWVzc2FnZX08L3NwYW4+O1xuICAgIHRleHRGaWVsZENsYXNzZXMgKz0gJyBibHgtaW52YWxpZCc7XG4gIH1cblxuICAvLyBwcmVmaXggZWxlbWVudFxuICBsZXQgcHJlZml4RWxlbWVudCA9IG51bGw7XG4gIGlmIChwcmVmaXgpIHtcbiAgICBwcmVmaXhFbGVtZW50ID0gPHNwYW4gY2xhc3NOYW1lPVwiYmx4LXRleHQtZmllbGQtcHJlZml4XCI+e3ByZWZpeH08L3NwYW4+O1xuICB9XG5cbiAgLy8gc3VmZml4IGVsZW1lbnRcbiAgbGV0IHN1ZmZpeEVsZW1lbnQgPSBudWxsO1xuICBpZiAoc3VmZml4KSB7XG4gICAgc3VmZml4RWxlbWVudCA9IDxzcGFuIGNsYXNzTmFtZT1cImJseC10ZXh0LWZpZWxkLXN1ZmZpeFwiPntzdWZmaXh9PC9zcGFuPjtcbiAgfVxuXG4gIC8vIGljb24gZWxlbWVudFxuICBsZXQgaWNvbkVsZW1lbnQgPSBudWxsO1xuICBpZiAoaWNvbikge1xuICAgIGljb25FbGVtZW50ID0gPHNwYW4gY2xhc3NOYW1lPVwiYmx4LXRleHQtZmllbGQtaWNvblwiPntpY29ufTwvc3Bhbj47XG4gIH1cblxuICAvLyByb290IGxldmVsIGNsYXNzZXNcbiAgbGV0IGNsYXNzZXMgPSAnYmx4LXRleHQtZmllbGQgJztcbiAgaWYgKG90aGVyLmRpc2FibGVkKSBjbGFzc2VzICs9ICdibHgtZGlzYWJsZWQgJztcblxuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIHN0eWxlPXtzdHlsZX1cbiAgICAgIGNsYXNzTmFtZT17YCR7Y2xhc3Nlc30gJHtjbGFzc05hbWV9YH1cbiAgICA+XG4gICAgICB7bGFiZWxFbGVtZW50fVxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJibHgtdGV4dC1maWVsZC1jb250YWluZXJcIj5cbiAgICAgICAge3ByZWZpeEVsZW1lbnR9XG4gICAgICAgIHtzdWZmaXhFbGVtZW50fVxuICAgICAgICA8aW5wdXRcbiAgICAgICAgICBjbGFzc05hbWU9e3RleHRGaWVsZENsYXNzZXN9XG4gICAgICAgICAgcmVmPXtmb3J3YXJkZWRSZWZ9XG4gICAgICAgICAgey4uLm90aGVyfVxuICAgICAgICAvPlxuICAgICAgICB7aWNvbkVsZW1lbnR9XG4gICAgICA8L2Rpdj5cbiAgICAgIHtpbnZhbGlkTGFiZWxNZXNzYWdlfVxuICAgIDwvZGl2PlxuICApO1xufVxuXG5UZXh0RmllbGQucHJvcFR5cGVzID0ge1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICBsYWJlbDogUHJvcFR5cGVzLnN0cmluZyxcbiAgcHJlZml4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIFByb3BUeXBlcy5ub2RlXG4gIF0pLFxuICBzdWZmaXg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgIFByb3BUeXBlcy5zdHJpbmcsXG4gICAgUHJvcFR5cGVzLm5vZGVcbiAgXSksXG4gIGljb246IFByb3BUeXBlcy5ub2RlLFxuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIGlzVmFsaWQ6IFByb3BUeXBlcy5ib29sLFxuICBpbnZhbGlkRXJyb3JNZXNzYWdlOiBQcm9wVHlwZXMuc3RyaW5nXG59O1xuXG5UZXh0RmllbGQuZGVmYXVsdFByb3BzID0ge1xuICBjbGFzc05hbWU6ICcnLFxuICBzdHlsZTogbnVsbCxcbiAgbGFiZWw6ICcnLFxuICBwcmVmaXg6IG51bGwsXG4gIHN1ZmZpeDogbnVsbCxcbiAgaWNvbjogbnVsbCxcbiAgZGlzYWJsZWQ6IGZhbHNlLFxuICBpc1ZhbGlkOiB0cnVlLFxuICBpbnZhbGlkRXJyb3JNZXNzYWdlOiAnJ1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdC5mb3J3YXJkUmVmKChwcm9wcywgcmVmKSA9PiAoXG4gIDxUZXh0RmllbGQgey4uLnByb3BzfSBmb3J3YXJkZWRSZWY9e3JlZn0gLz5cbikpO1xuXG4iXX0=
